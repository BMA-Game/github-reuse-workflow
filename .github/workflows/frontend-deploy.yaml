name: Frontend deploy

on:
  workflow_call:
    inputs:
      bucket-name: 
        required: true
        type: string
      distribution-id:
        required: true
        type: string
      aws-account:
        required: true
        type: string
      aws-region:
        required: true
        type: string
        default: ap-southeast-1
      role-to-assume:
        required: true
        type: string
      role-session-name:
        required: true
        type: string
      role-duration-seconds: 
        required: true
        type: number
        default: 1200
      cloudflare-credential:
        required: true
        type: string
      secret-zone-id-key:
        required: true
        type: string

jobs:
  frontend-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Download a single artifact
        uses: actions/download-artifact@v4
        with:
          name: out

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ inputs.aws-region }}
          role-to-assume: ${{ inputs.role-to-assume }}
          role-session-name: ${{ inputs.role-session-name }}
          role-duration-seconds: ${{ inputs.role-duration-seconds }}

      - name: Sync to s3
        run: aws s3 sync ./ s3://${{ inputs.bucket-name }} --delete

      - name: Invalidate Cloudfront cache
        run: aws cloudfront create-invalidation --distribution-id ${{ inputs.distribution-id }} --paths '/*'

      # - name: Get Cloudflare api token
      #   id: get-cloudflare-secret
      #   run: |
      #     SECRETS=$(aws secretsmanager get-secret-value --secret-id arn:aws:secretsmanager:ap-southeast-1:${{ inputs.aws-account }}:secret:${{ inputs.cloudflare-credential }} --query SecretString --output text --region ${{ inputs.aws-region }})
      #     CLOUDFLARE_ZONE_ID=$(echo $SECRETS | jq '."${{ inputs.secret-zone-id-key }}"' | tr -d '"')
      #     CLOUDFLARE_API_TOKEN=$(echo $SECRETS | jq .api_token | tr -d '"')
      #     echo "::add-mask::$CLOUDFLARE_ZONE_ID"
      #     echo "::add-mask::$CLOUDFLARE_API_TOKEN"
      #     echo "zone-id=$CLOUDFLARE_ZONE_ID" >> $GITHUB_OUTPUT
      #     echo "api-token=$CLOUDFLARE_API_TOKEN" >> $GITHUB_OUTPUT

      # - name: Purge Cloudflare cache
      #   uses: jakejarvis/cloudflare-purge-action@master
      #   env:
      #     CLOUDFLARE_ZONE: ${{ steps.get-cloudflare-secret.outputs.zone-id }}
      #     CLOUDFLARE_TOKEN: ${{ steps.get-cloudflare-secret.outputs.api-token }}

