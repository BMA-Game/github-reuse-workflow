name: Sync to R2 Bucket

on:
  workflow_call:
    inputs:
      directory:
        description: "The local directory to sync from"
        required: true
        default: "dev"
        type: string
      bucket-name:
        description: "The name of the R2 bucket"
        required: true
        type: string
      r2-account-id:
        description: "Your Cloudflare R2 Account ID"
        required: true
        type: string
    secrets:
      R2_ACCESS_KEY_ID:
        required: true
      R2_SECRET_ACCESS_KEY:
        required: true

jobs:
  discover-subdirectories:
    runs-on: 4-core-arm64-GitHub-hosted-runners
    outputs:
      subdirs: ${{ steps.find.outputs.subdirs }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Find subdirectories and detect only new img
        id: find
        shell: bash
        run: |
          set -euo pipefail

          # Debug: Show current directory and inputs
          echo "Current directory: $(pwd)"
          echo "Input directory: ${{ inputs.directory }}"

          # Debug: Show all changed files first
          echo "All changed files:"
          git diff --name-only --diff-filter=ACM HEAD^ HEAD || echo "No changes found"

          # Alternative: Try to get changes from the last commit
          echo "Files in last commit:"
          git show --name-only --pretty=format: HEAD | tail -n +2 || echo "No files in last commit"

          # Get changed img files in latest commit, filtering for the specific directory
          echo "Testing grep pattern:"
          git diff --name-only --diff-filter=ACM HEAD^ HEAD | grep "^${{ inputs.directory }}/.*\.(png|webp)$" || echo "No matches found"

          # Alternative approach: use awk for more reliable pattern matching
          echo "Testing awk pattern:"
          git diff --name-only --diff-filter=ACM HEAD^ HEAD | awk -v dir="${{ inputs.directory }}" '$0 ~ "^" dir "/" && $0 ~ /\.(png|webp)$/' || echo "No matches found with awk"

          mapfile -t changed_img_files < <(git diff --name-only --diff-filter=ACM HEAD^ HEAD | awk -v dir="${{ inputs.directory }}" '$0 ~ "^" dir "/" && $0 ~ /\.(png|webp)$/' | sed "s|^${{ inputs.directory }}/||" || true)

          # Debug: Show what we found
          echo "Changed img files count: ${#changed_img_files[@]}"
          echo "Changed img files: ${changed_img_files[*]}"

          # Initialize set to store subdirs
          declare -A changed_dirs=()

          has_root_files=false

          for file in "${changed_img_files[@]}"; do
            echo "Processing file: '$file'"
            # Normalize and check if it's at root level
            if [[ "$file" == */* ]]; then
              top_dir="${file%%/*}"
              echo "Found subdirectory: '$top_dir'"
              changed_dirs["$top_dir"]=1
            else
              echo "Found root file: '$file'"
              has_root_files=true
            fi
          done

          # Debug: Show what directories we found
          echo "Directories found: ${!changed_dirs[@]}"
          echo "Number of directories: ${#changed_dirs[@]}"

          # Convert changed_dirs to sorted array
          if [ "${#changed_dirs[@]}" -gt 0 ]; then
            mapfile -t subdirs < <(printf "%s\n" "${!changed_dirs[@]}" | sort)
            subdir_json=$(printf "%s\n" "${subdirs[@]}" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "Found subdirs: $subdir_json"
          else
            echo "no dir"
            subdir_json="[]"
          fi

          echo "has_root_files=${has_root_files}" >> "$GITHUB_OUTPUT"
          echo "subdirs=${subdir_json}" >> "$GITHUB_OUTPUT"

  sync-subdirectories:
    needs: [discover-subdirectories]
    if: ${{ needs.discover-subdirectories.outputs.subdirs != '' && needs.discover-subdirectories.outputs.subdirs != '[]' }}
    strategy:
      fail-fast: false
      max-parallel: 60
      matrix:
        subdir: ${{ fromJson(needs.discover-subdirectories.outputs.subdirs || '[]') }}
    uses: BMA-Game/github-reuse-workflow/.github/workflows/sync-r2-reusable.yaml@main
    with:
      # Compose the full path to pass to the reusable workflow
      directory: ${{ format('{0}/{1}', inputs.directory, matrix.subdir) }}
      bucket-name: ${{ inputs['bucket-name'] }}
      r2-account-id: ${{ inputs['r2-account-id'] }}
      dest-prefix: ${{ matrix.subdir }}
    secrets:
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
